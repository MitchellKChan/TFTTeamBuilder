body {
    background-color: grey;
}

/* Start Clippath hex styling method */
/* method tutorial: https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/ */

.main {
    display: flex; 
    --s: 80px;  /* size  */
    --m: 4px;   /* margin */
    --f: calc(var(--s) * 1.732 + 4 * var(--m) - 1px); /* height of two hexagons (including their margins), minus twice the overlap */
    /* margin-bottom: 3%; */
  }
  
  .board-container {
    font-size: 0; /* disable white space between inline block element */
  }
  
  .hex-border {
    width: var(--s);
    margin: var(--m);
    height: calc(var(--s) * 1.1547);
    display: inline-block;
    font-size: initial; /* we reset the font-size if we want to add some content */
    clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
    margin-bottom: calc(var(--m) - var(--s) * 0.2);
  }

  .hex-inner { /* TODO: VALIDATE IF THIS POSITION OR .hex-has-unit position NEEDS TO CHANGE TO KEEP HEX POSITIONS STATIC ON PAGE */
      position: relative; 
      top: var(--m); /* equal to border thickness */
      left: var(--m); /* equal to border thickness */
      width: calc(var(--s) - (var(--m) * 2)); /* container height - (border thickness * 2) */
      height: calc((var(--s) * 1.1547) - (var(--m) * 2)); /* container height - (border thickness * 2) */
      clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
  }

  .board-container::before {
    content: "";
    width: calc(var(--s)/2 + var(--m));
    float: left;
    height: 120%;
    shape-outside: repeating-linear-gradient(#0000 0 calc(var(--f) - 3px), #000 0 var(--f));
  }

/* End Clippath hex styling method */


.hex-empty {
    background-color: #000;
}
.hex-inner-empty {
    background-color: darkgrey;
}

.hex-drag-over {
    background-color: goldenrod;
}

.hex-occupied {
    background-color: firebrick;
}

.hex-has-unit { /* TODO: VALIDATE IF THIS POSITION OR .hex-has-unit position NEEDS TO CHANGE TO KEEP HEX POSITIONS STATIC ON PAGE */
    position: absolute; /* dropped images are centered properly when position is not defined BUT hex moves slighty when dropping unit without it being absolute */
    display: flex;
    justify-content: center;
    align-items: center;
}

.hex-has-unit img { /* looks okay when height and width are 120%-125% when .hex-has-unit position is absolute*/
    height: 120%;
    width: 120%;
    /* max-height: calc(var(--s) * 1.1547); */
    display: block;
    margin: auto;
}

.equipped-items {
    /* background-color: cornflowerblue; */
}

.items {
    /* background-color: cadetblue; */
}

.item img {
    max-width: 2rem;
}

.traits {
    /* background-color: darksalmon; */
}

.units {
    /* background-color: plum; */
}

.unit img {
    max-height: 4em;
}